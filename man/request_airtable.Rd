% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/request_airtable.R
\name{request_airtable}
\alias{request_airtable}
\alias{req_airtable}
\title{Use httr2 to create or modify an Airtable API request}
\usage{
request_airtable(
  airtable = NULL,
  url = NULL,
  base = NULL,
  table = NULL,
  view = NULL,
  api_url = NULL,
  require_base = TRUE,
  require_table = TRUE,
  require_view = FALSE,
  ...,
  call = caller_env()
)

req_airtable(
  .req = NULL,
  airtable = NULL,
  url = NULL,
  api_url = NULL,
  ...,
  template = NULL,
  method = NULL,
  data = NULL,
  token = NULL,
  string = NULL,
  allow_key = TRUE,
  require_base = TRUE,
  require_table = FALSE,
  remove_view = TRUE,
  call = caller_env()
)
}
\arguments{
\item{airtable}{An airtable class object created with \code{\link[=airtable]{airtable()}}. airtable
must include a request_url attribute. url is ignored if airtable is
provided. Optional if url or base \emph{and} table are supplied.}

\item{url}{A URL for an API call or an Airtable view. If url is provided and
is a valid URL, \code{\link[=request_airtable]{request_airtable()}} returns  \code{httr2::request(url)}. url
is optional if airtable \emph{or} base and table are supplied. If url is an
Airtable view, any additional base or table values provided are ignored. If
airtable is provided, any supplied url is ignored.}

\item{base}{Airtable base id starting with with "app". Optional if url or
airtable are supplied or if require_base is \code{FALSE}. base and table are
both required if url and airtable are \code{NULL} and require_base is \code{TRUE}.}

\item{table}{Airtable table id or name. Table ID values are strings starting
with "tbl". Optional if require_table is \code{FALSE}.}

\item{view}{Airtable view ID. View ID values starts with "viw". Optional if
require_view is \code{FALSE}.}

\item{api_url}{Airtable API URL, If \code{NULL} (default), the api_url is set to
\code{getOption("rairtable.api_url", "https://api.airtable.com/v0")}.}

\item{require_base}{If \code{TRUE} (default), the string "app" must be included in
the supplied API request URL.}

\item{require_table}{If \code{TRUE}, the string "tbl" must be included in the
supplied url. If require_table is a string, it is treated as the required
table name which must be part of url. If \code{FALSE} (default), there is no
check for a table being present in the API request URL.}

\item{require_view}{If \code{TRUE}, the string "viw" must be included in the
string supplied to url. If \code{FALSE} (default), there is no check
for a view being present in the API request URL.}

\item{...}{
  Arguments passed on to \code{\link[=parse_airtable_url]{parse_airtable_url}}
  \describe{
    \item{\code{base_url}}{Base URL for an Airtable base or view. Defaults \code{NULL} and
set to \code{getOption("rairtable.base_url", "https://airtable.com")}.}
    \item{\code{table_name,view_name}}{Pattern to use when parsing a table name or view
name. Defaults to \code{NULL} which extracts strings starting with "tbl" for
tables IDs and "viw" for view IDs.}
    \item{\code{require_field}}{If \code{TRUE}, the url supplied to \code{\link[=parse_airtable_url]{parse_airtable_url()}}
must include a string starting with "fld" to use as the field ID .}
  }}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}

\item{.req}{A request object created by \code{\link[httr2:request]{httr2::request()}} or
\code{\link[=request_airtable]{request_airtable()}}. If .req is provided, any supplied url, api_url, or
airtable parameters are ignored.}

\item{template}{Template for query parameters passed to
\code{\link[httr2:req_template]{httr2::req_template()}}, Default: \code{NULL}.}

\item{method}{Custom HTTP method}

\item{data}{Data to include in body.}

\item{token}{Airtable personal access token, Defaults to \code{NULL} which is set
to environmental variable for "AIRTABLE_PAT" (from \code{\link[=get_airtable_pat]{get_airtable_pat()}}) or
"AIRTABLE_API_KEY" (from \code{\link[=get_airtable_api_key]{get_airtable_api_key()}}).}

\item{string}{Passed to \code{\link[httr2:req_user_agent]{httr2::req_user_agent()}}, Default: \code{NULL} (set to
\code{getOption("rairtable.useragent", default = "rairtable (https://github.com/matthewjrogers/rairtable)")})}

\item{allow_key}{If \code{TRUE}, allow use of an Airtable API key or an Airtable
personal access token (PAT) to authenticate the request. The metadata API
does not support the API key so allow_key is set to \code{FALSE} for any
functions that call that API.}

\item{remove_view}{If \code{TRUE} (default), remove view from request (only using
view if it is explicitly passed as a query or template parameter). If
\code{FALSE}, the request url for the supplied .req or created .req object may
contain a view query parameter parsed from the url or view supplied to
\code{\link[=airtable]{airtable()}} when creating an airtable object.}
}
\value{
\code{\link[=request_airtable]{request_airtable()}} returns an HTTP response: an S3 list with class
httr2_request. \code{\link[=req_airtable]{req_airtable()}} returns a modified HTTP request.
}
\description{
These internal functions are designed for developers interested in
interacting directly with the Airtable API with or without using the airtable
class implemented in this package.
}
\details{
\code{\link[=request_airtable]{request_airtable()}} creates an initial request object based on an airtable
object, API url, Airtable view URL, or base and table IDs.

\code{\link[=req_airtable]{req_airtable()}} builds an API request optionally using a template or custom
HTTP method (other than GET or POST). This function can create an initial
request using a URL or airtable object or use an existing request object. The
function also set the rate limit, user agent, and authenticate an Airtable
API request.
}
\keyword{internal}
